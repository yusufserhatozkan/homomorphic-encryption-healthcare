"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface ParameterSet {
  name: string
  polyModulusDegree: number
  plainModulus: number
  securityLevel: number
}

interface BenchmarkResult {
  encryptionTime: string
  computationTime: string
  decryptionTime: string
  totalTime: string
  error: number
  parameters: {
    polyModulusDegree: number
    plainModulus: number
    securityLevel: number
  }
}

const BFV_PARAMETER_SETS: ParameterSet[] = [
  {
    name: "Low Security",
    polyModulusDegree: 4096,
    plainModulus: 0,  // Generated by SEAL
    securityLevel: 128
  },
  {
    name: "Medium Security",
    polyModulusDegree: 8192,
    plainModulus: 0,  // Generated by SEAL
    securityLevel: 192
  },
  {
    name: "High Security",
    polyModulusDegree: 16384,
    plainModulus: 0,  // Generated by SEAL
    securityLevel: 256
  }
]

const CKKS_PARAMETER_SETS: ParameterSet[] = [
  {
    name: "Low Precision",
    polyModulusDegree: 4096,
    plainModulus: 0,  // Not used in CKKS
    securityLevel: 128
  },
  {
    name: "Medium Precision",
    polyModulusDegree: 8192,
    plainModulus: 0,  // Not used in CKKS
    securityLevel: 192
  },
  {
    name: "High Precision",
    polyModulusDegree: 16384,
    plainModulus: 0,  // Not used in CKKS
    securityLevel: 256
  }
]

export function SchemeParameters() {
  const [loading, setLoading] = useState(false)
  const [data, setData] = useState<BenchmarkResult | null>(null)
  const [selectedScheme, setSelectedScheme] = useState<"bfv" | "ckks">("bfv")
  const [selectedParameterSet, setSelectedParameterSet] = useState<string>(BFV_PARAMETER_SETS[0].name)
  const [testValue, setTestValue] = useState<string>("1000")

  const handleRunTest = async () => {
    setLoading(true)
    try {
      const parameterSet = selectedScheme === "bfv" 
        ? BFV_PARAMETER_SETS.find(p => p.name === selectedParameterSet)
        : CKKS_PARAMETER_SETS.find(p => p.name === selectedParameterSet)

      if (!parameterSet) {
        throw new Error("Invalid parameter set")
      }

      const response = await fetch("http://localhost:18080/api/parameter-benchmark", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          scheme: selectedScheme,
          polyModulusDegree: parameterSet.polyModulusDegree,
          plainModulus: parameterSet.plainModulus,
          securityLevel: parameterSet.securityLevel,
          value: parseInt(testValue)
        }),
      })

      if (!response.ok) {
        throw new Error("Failed to fetch data")
      }

      const result = await response.json()
      setData(result)
    } catch (error) {
      console.error("Error:", error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Scheme Parameter Analysis</CardTitle>
          <CardDescription>
            Compare different parameter sets for BFV and CKKS schemes
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Scheme</Label>
              <Select
                value={selectedScheme}
                onValueChange={(value) => {
                  setSelectedScheme(value as "bfv" | "ckks")
                  setSelectedParameterSet(
                    value === "bfv" 
                      ? BFV_PARAMETER_SETS[0].name 
                      : CKKS_PARAMETER_SETS[0].name
                  )
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select scheme" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="bfv">BFV</SelectItem>
                  <SelectItem value="ckks">CKKS</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>Parameter Set</Label>
              <Select
                value={selectedParameterSet}
                onValueChange={setSelectedParameterSet}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select parameter set" />
                </SelectTrigger>
                <SelectContent>
                  {(selectedScheme === "bfv" ? BFV_PARAMETER_SETS : CKKS_PARAMETER_SETS).map((set) => (
                    <SelectItem key={set.name} value={set.name}>
                      {set.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>Test Value</Label>
              <Input
                type="number"
                value={testValue}
                onChange={(e) => setTestValue(e.target.value)}
                disabled={loading}
              />
            </div>
            <div className="flex items-end">
              <Button 
                onClick={handleRunTest} 
                disabled={loading}
                className="w-full"
              >
                {loading ? "Loading..." : "Run Test"}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {data && (
        <Card>
          <CardHeader>
            <CardTitle>Results</CardTitle>
            <CardDescription>
              Performance metrics for selected parameter set
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Encryption Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-2xl font-bold">{data.encryptionTime}ms</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Decryption Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-2xl font-bold">{data.decryptionTime}ms</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Computation Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-2xl font-bold">{data.computationTime}ms</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Total Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-2xl font-bold">{data.totalTime}ms</p>
                  </CardContent>
                </Card>
              </div>
              {data.error !== undefined && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Error</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-2xl font-bold">{data.error.toFixed(6)}</p>
                  </CardContent>
                </Card>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
} 