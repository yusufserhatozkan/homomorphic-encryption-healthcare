{"version":3,"file":"allows_wasm_web_umd.js","sources":["../src/bin/seal_allows_wasm_web.js","../src/main/loader.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context.ts","../src/implementation/context-data.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-modulus.ts","../src/implementation/plain-text.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/seal.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/allows_wasm_web_umd.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["var Module = (() => {\n  \n  return (\nasync function(moduleArg = {}) {\n  var moduleRtn;\n\nvar n=moduleArg,aa,ba,ca=new Promise((a,b)=>{aa=a;ba=b}),da=\"undefined\"!=typeof WorkerGlobalScope,ea=\"./this.program\",fa=import.meta.url;if(\"object\"==typeof window||da)try{new URL(\".\",fa)}catch{}var ha=console.error.bind(console),ia,p,v=!1,ja,ka,w,y,z,A,B,la,ma,na,oa;\nfunction pa(){var a=p.buffer;ka=new Int8Array(a);y=new Int16Array(a);w=new Uint8Array(a);z=new Uint16Array(a);A=new Int32Array(a);B=new Uint32Array(a);la=new Float32Array(a);oa=new Float64Array(a);ma=new BigInt64Array(a);na=new BigUint64Array(a)}var D=0,E=null;function qa(a){n.onAbort?.(a);a=\"Aborted(\"+a+\")\";ha(a);v=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}var ra;\nasync function sa(a){if(!ArrayBuffer.isView(a))if(a==ra&&ia)a=new Uint8Array(ia);else throw\"both async and sync fetching of the wasm failed\";return a}async function ta(a){var b=ra;try{var c=await sa(b);return await WebAssembly.instantiate(c,a)}catch(d){ha(`failed to asynchronously prepare wasm: ${d}`),qa(d)}}async function ua(a){return ta(a)}class va{name=\"ExitStatus\";constructor(a){this.message=`Program terminated with exit(${a})`;this.status=a}}\nvar wa=a=>{for(;0<a.length;)a.shift()(n)},xa=[],ya=[],za=()=>{var a=n.preRun.shift();ya.push(a)},Aa=a=>{for(var b,c,d=0,e=0,f=a.length,g=new Uint8Array((3*f>>2)-(\"=\"==a[f-2])-(\"=\"==a[f-1]));d<f;d+=4,e+=3)b=F[a.charCodeAt(d+1)],c=F[a.charCodeAt(d+2)],g[e]=F[a.charCodeAt(d)]<<2|b>>4,g[e+1]=b<<4|c>>2,g[e+2]=c<<6|F[a.charCodeAt(d+3)];return g},Ba=!0;class Ca{constructor(a){this.X=a-24}}\nvar Da=0,Ea=0,Fa,G=a=>{for(var b=\"\";w[a>>>0];)b+=Fa[w[a++>>>0]];return b},H={},J={},Ga={},K=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}},Ha=a=>{throw new K(a);};function Ja(a,b,c={}){var d=b.name;if(!a)throw new K(`type \"${d}\" must have a positive integer typeid pointer`);if(J.hasOwnProperty(a)){if(c.va)return;throw new K(`Cannot register type '${d}' twice`);}J[a]=b;delete Ga[a];H.hasOwnProperty(a)&&(b=H[a],delete H[a],b.forEach(e=>e()))}\nfunction L(a,b,c={}){return Ja(a,b,c)}\nvar Ka=(a,b,c)=>{switch(b){case 1:return c?d=>ka[d>>>0]:d=>w[d>>>0];case 2:return c?d=>y[d>>>1>>>0]:d=>z[d>>>1>>>0];case 4:return c?d=>A[d>>>2>>>0]:d=>B[d>>>2>>>0];case 8:return c?d=>ma[d>>>3>>>0]:d=>na[d>>>3>>>0];default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},La=a=>{throw new K(a.V.Y.W.name+\" instance already deleted\");},Ma=!1,Na=()=>{},M=a=>{if(\"undefined\"===typeof FinalizationRegistry)return M=b=>b,a;Ma=new FinalizationRegistry(b=>{b=b.V;--b.count.value;0===b.count.value&&\n(b.$?b.ca.fa(b.$):b.Y.W.fa(b.X))});M=b=>{var c=b.V;c.$&&Ma.register(b,{V:c},b);return b};Na=b=>{Ma.unregister(b)};return M(a)},Oa=[];function Pa(){}\nvar Qa=(a,b)=>Object.defineProperty(b,\"name\",{value:a}),Ra={},Sa=(a,b,c)=>{if(void 0===a[b].Z){var d=a[b];a[b]=function(...e){if(!a[b].Z.hasOwnProperty(e.length))throw new K(`Function '${c}' called with an invalid number of arguments (${e.length}) - expects one of (${a[b].Z})!`);return a[b].Z[e.length].apply(this,e)};a[b].Z=[];a[b].Z[d.ga]=d}},Ta=(a,b,c)=>{if(n.hasOwnProperty(a)){if(void 0===c||void 0!==n[a].Z&&void 0!==n[a].Z[c])throw new K(`Cannot register public name '${a}' twice`);Sa(n,a,a);if(n[a].Z.hasOwnProperty(c))throw new K(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`);\nn[a].Z[c]=b}else n[a]=b,n[a].ga=c},Ua=a=>{a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a};function Va(a,b,c,d,e,f,g,h){this.name=a;this.constructor=b;this.ea=c;this.fa=d;this.aa=e;this.ta=f;this.ka=g;this.sa=h;this.ya=[]}\nvar Wa=(a,b,c)=>{for(;b!==c;){if(!b.ka)throw new K(`Expected null or instance of ${c.name}, got an instance of ${b.name}`);a=b.ka(a);b=b.aa}return a},Xa=a=>{if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a};\nfunction Ya(a,b){if(null===b){if(this.oa)throw new K(`null is not a valid ${this.name}`);return 0}if(!b.V)throw new K(`Cannot pass \"${Xa(b)}\" as a ${this.name}`);if(!b.V.X)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);return Wa(b.V.X,b.V.Y.W,this.W)}\nfunction Za(a,b){if(null===b){if(this.oa)throw new K(`null is not a valid ${this.name}`);if(this.na){var c=this.za();null!==a&&a.push(this.fa,c);return c}return 0}if(!b||!b.V)throw new K(`Cannot pass \"${Xa(b)}\" as a ${this.name}`);if(!b.V.X)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.ma&&b.V.Y.ma)throw new K(`Cannot convert argument of type ${b.V.ca?b.V.ca.name:b.V.Y.name} to parameter type ${this.name}`);c=Wa(b.V.X,b.V.Y.W,this.W);if(this.na){if(void 0===\nb.V.$)throw new K(\"Passing raw pointer to smart pointer is illegal\");switch(this.Ba){case 0:if(b.V.ca===this)c=b.V.$;else throw new K(`Cannot convert argument of type ${b.V.ca?b.V.ca.name:b.V.Y.name} to parameter type ${this.name}`);break;case 1:c=b.V.$;break;case 2:if(b.V.ca===this)c=b.V.$;else{var d=b.clone();c=this.Aa(c,N(()=>d[\"delete\"]()));null!==a&&a.push(this.fa,c)}break;default:throw new K(\"Unsupporting sharing policy\");}}return c}\nfunction $a(a,b){if(null===b){if(this.oa)throw new K(`null is not a valid ${this.name}`);return 0}if(!b.V)throw new K(`Cannot pass \"${Xa(b)}\" as a ${this.name}`);if(!b.V.X)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);if(b.V.Y.ma)throw new K(`Cannot convert argument of type ${b.V.Y.name} to parameter type ${this.name}`);return Wa(b.V.X,b.V.Y.W,this.W)}function ab(a){return this.fromWireType(B[a>>>2>>>0])}\nvar bb=(a,b,c)=>{if(b===c)return a;if(void 0===c.aa)return null;a=bb(a,b,c.aa);return null===a?null:c.sa(a)},cb={},db=(a,b)=>{if(void 0===b)throw new K(\"ptr should not be undefined\");for(;a.aa;)b=a.ka(b),a=a.aa;return cb[b]},eb=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}},fb=(a,b)=>{if(!b.Y||!b.X)throw new eb(\"makeClassHandle requires ptr and ptrType\");if(!!b.ca!==!!b.$)throw new eb(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return M(Object.create(a,\n{V:{value:b,writable:!0}}))};function gb(a,b,c,d,e,f,g,h,l,k,m){this.name=a;this.W=b;this.oa=c;this.ma=d;this.na=e;this.xa=f;this.Ba=g;this.qa=h;this.za=l;this.Aa=k;this.fa=m;e||void 0!==b.aa?this.toWireType=Za:(this.toWireType=d?Ya:$a,this.ba=null)}\nvar hb=(a,b,c)=>{if(!n.hasOwnProperty(a))throw new eb(\"Replacing nonexistent public symbol\");void 0!==n[a].Z&&void 0!==c?n[a].Z[c]=b:(n[a]=b,n[a].ga=c)},ib=[],jb,kb=a=>{var b=ib[a];b||(ib[a]=b=jb.get(a));return b},lb=(a,b,c=[])=>{b=kb(b)(...c);return\"p\"==a[0]?b>>>0:b},mb=(a,b)=>(...c)=>lb(a,b,c),O=(a,b)=>{a=G(a);var c=a.includes(\"p\")?mb(a,b):kb(b);if(\"function\"!=typeof c)throw new K(`unknown function pointer with signature ${a}: ${b}`);return c};class nb extends Error{}\nvar pb=a=>{a=ob(a);var b=G(a);R(a);return b},S=(a,b)=>{function c(f){e[f]||J[f]||(Ga[f]?Ga[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new nb(`${a}: `+d.map(pb).join([\", \"]));},T=(a,b,c)=>{function d(h){h=c(h);if(h.length!==a.length)throw new eb(\"Mismatched type converter count\");for(var l=0;l<a.length;++l)L(a[l],h[l])}a.forEach(h=>Ga[h]=b);var e=Array(b.length),f=[],g=0;b.forEach((h,l)=>{J.hasOwnProperty(h)?e[l]=J[h]:(f.push(h),H.hasOwnProperty(h)||(H[h]=[]),H[h].push(()=>\n{e[l]=J[h];++g;g===f.length&&d(e)}))});0===f.length&&d(e)},qb=a=>{for(;a.length;){var b=a.pop();a.pop()(b)}};function rb(a){for(var b=1;b<a.length;++b)if(null!==a[b]&&void 0===a[b].ba)return!0;return!1}\nfunction tb(a,b,c,d,e,f){var g=b.length;if(2>g)throw new K(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var h=null!==b[1]&&null!==c,l=rb(b);c=\"void\"!==b[0].name;d=[a,Ha,d,e,qb,b[0],b[1]];for(e=0;e<g-2;++e)d.push(b[e+2]);if(!l)for(e=h?1:2;e<b.length;++e)null!==b[e].ba&&d.push(b[e].ba);l=rb(b);e=b.length-2;var k=[],m=[\"fn\"];h&&m.push(\"thisWired\");for(g=0;g<e;++g)k.push(`arg${g}`),m.push(`arg${g}Wired`);k=k.join(\",\");m=m.join(\",\");k=`return function (${k}) {\\n`;l&&\n(k+=\"var destructors = [];\\n\");var q=l?\"destructors\":\"null\",r=\"humanName throwBindingError invoker fn runDestructors retType classParam\".split(\" \");h&&(k+=`var thisWired = classParam['toWireType'](${q}, this);\\n`);for(g=0;g<e;++g)k+=`var arg${g}Wired = argType${g}['toWireType'](${q}, arg${g});\\n`,r.push(`argType${g}`);k+=(c||f?\"var rv = \":\"\")+`invoker(${m});\\n`;if(l)k+=\"runDestructors(destructors);\\n\";else for(g=h?1:2;g<b.length;++g)f=1===g?\"thisWired\":\"arg\"+(g-2)+\"Wired\",null!==b[g].ba&&(k+=`${f}_dtor(${f});\\n`,\nr.push(`${f}_dtor`));c&&(k+=\"var ret = retType['fromWireType'](rv);\\nreturn ret;\\n\");let [t,u]=[r,k+\"}\\n\"];b=(new Function(...t,u))(...d);return Qa(a,b)}\nvar ub=(a,b)=>{for(var c=[],d=0;d<a;d++)c.push(B[b+4*d>>>2>>>0]);return c},vb=a=>{a=a.trim();const b=a.indexOf(\"(\");return-1===b?a:a.slice(0,b)},wb=(a,b,c)=>{if(!(a instanceof Object))throw new K(`${c} with invalid \"this\": ${a}`);if(!(a instanceof b.W.constructor))throw new K(`${c} incompatible with \"this\" of type ${a.constructor.name}`);if(!a.V.X)throw new K(`cannot call emscripten binding method ${c} on deleted object`);return Wa(a.V.X,a.V.Y.W,b.W)},xb=[],U=[0,1,,1,null,1,!0,1,!1,1];\nfunction yb(a){a>>>=0;9<a&&0===--U[a+1]&&(U[a]=void 0,xb.push(a))}\nfor(var V=a=>{if(!a)throw new K(`Cannot use deleted val. handle = ${a}`);return U[a]},N=a=>{switch(a){case void 0:return 2;case null:return 4;case !0:return 6;case !1:return 8;default:const b=xb.pop()||U.length;U[b]=a;U[b+1]=1;return b}},zb={name:\"emscripten::val\",fromWireType:a=>{var b=V(a);yb(a);return b},toWireType:(a,b)=>N(b),da:8,readValueFromPointer:ab,ba:null},Ab=(a,b,c)=>{switch(b){case 1:return c?function(d){return this.fromWireType(ka[d>>>0])}:function(d){return this.fromWireType(w[d>>>\n0])};case 2:return c?function(d){return this.fromWireType(y[d>>>1>>>0])}:function(d){return this.fromWireType(z[d>>>1>>>0])};case 4:return c?function(d){return this.fromWireType(A[d>>>2>>>0])}:function(d){return this.fromWireType(B[d>>>2>>>0])};default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Bb=(a,b)=>{var c=J[a];if(void 0===c)throw a=`${b} has unknown type ${pb(a)}`,new K(a);return c},Cb=(a,b)=>{switch(b){case 4:return function(c){return this.fromWireType(la[c>>>2>>>0])};case 8:return function(c){return this.fromWireType(oa[c>>>\n3>>>0])};default:throw new TypeError(`invalid float width (${b}): ${a}`);}},Db=Object.assign({optional:!0},zb),W=(a,b,c)=>{var d=w;b>>>=0;if(!(0<c))return 0;var e=b;c=b+c-1;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);if(55296<=g&&57343>=g){var h=a.charCodeAt(++f);g=65536+((g&1023)<<10)|h&1023}if(127>=g){if(b>=c)break;d[b++>>>0]=g}else{if(2047>=g){if(b+1>=c)break;d[b++>>>0]=192|g>>6}else{if(65535>=g){if(b+2>=c)break;d[b++>>>0]=224|g>>12}else{if(b+3>=c)break;d[b++>>>0]=240|g>>18;d[b++>>>0]=128|\ng>>12&63}d[b++>>>0]=128|g>>6&63}d[b++>>>0]=128|g&63}}d[b>>>0]=0;return b-e},Eb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Fb=\"undefined\"!=typeof TextDecoder?new TextDecoder:void 0,Gb=(a=0,b=NaN)=>{var c=w;a>>>=0;var d=a+b;for(b=a;c[b]&&!(b>=d);)++b;if(16<b-a&&c.buffer&&Fb)return Fb.decode(c.subarray(a,b));for(d=\"\";a<b;){var e=c[a++];if(e&128){var f=c[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var g=\nc[a++]&63;e=224==(e&240)?(e&15)<<12|f<<6|g:(e&7)<<18|f<<12|g<<6|c[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},Hb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Ib=(a,b)=>{a>>>=1;b=a+b/2;for(var c=a;!(c>=b)&&z[c>>>0];)++c;if(16<c-a&&Hb)return Hb.decode(z.subarray(a>>>0,c>>>0));for(c=\"\";!(a>=b);++a){var d=z[a>>>0];if(0==d)break;c+=String.fromCharCode(d)}return c},Jb=(a,b,c)=>{c??=\n2147483647;if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)y[b>>>1>>>0]=a.charCodeAt(e),b+=2;y[b>>>1>>>0]=0;return b-d},Kb=a=>2*a.length,Lb=(a,b)=>{for(var c=0,d=\"\";!(c>=b/4);){var e=A[a+4*c>>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Mb=(a,b,c)=>{b>>>=0;c??=2147483647;if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var g=a.charCodeAt(++e);\nf=65536+((f&1023)<<10)|g&1023}A[b>>>2>>>0]=f;b+=4;if(b+4>c)break}A[b>>>2>>>0]=0;return b-d},Nb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b},Ob=0,Pb=(a,b,c)=>{var d=[];a=a.toWireType(d,c);d.length&&(B[b>>>2>>>0]=N(d));return a},Qb={},Rb=a=>{var b=Qb[a];return void 0===b?G(a):b},Sb=[],Tb=a=>{var b=Sb.length;Sb.push(a);return b},Ub=(a,b)=>{for(var c=Array(a),d=0;d<a;++d)c[d]=Bb(B[b+4*d>>>2>>>0],`parameter ${d}`);return c},X={},Vb=a=>{if(!(a instanceof\nva||\"unwind\"==a))throw a;},Wb=a=>{ja=a;Ba||0<Ob||(n.onExit?.(a),v=!0);throw new va(a);},Xb=a=>{if(!v)try{if(a(),!(Ba||0<Ob))try{ja=a=ja,Wb(a)}catch(b){Vb(b)}}catch(b){Vb(b)}},Yb={},$b=()=>{if(!Zb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ea||\"./this.program\"},b;for(b in Yb)void 0===Yb[b]?delete a[b]:a[b]=Yb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);\nZb=c}return Zb},Zb,ac=()=>a=>crypto.getRandomValues(a),bc=a=>{(bc=ac())(a)},F=new Uint8Array(123),Y=25;0<=Y;--Y)F[48+Y]=52+Y,F[65+Y]=Y,F[97+Y]=26+Y;F[43]=62;F[47]=63;for(var cc=Array(256),dc=0;256>dc;++dc)cc[dc]=String.fromCharCode(dc);Fa=cc;\n(()=>{let a=Pa.prototype;Object.assign(a,{isAliasOf:function(c){if(!(this instanceof Pa&&c instanceof Pa))return!1;var d=this.V.Y.W,e=this.V.X;c.V=c.V;var f=c.V.Y.W;for(c=c.V.X;d.aa;)e=d.ka(e),d=d.aa;for(;f.aa;)c=f.ka(c),f=f.aa;return d===f&&e===c},clone:function(){this.V.X||La(this);if(this.V.ja)return this.V.count.value+=1,this;var c=M,d=Object,e=d.create,f=Object.getPrototypeOf(this),g=this.V;c=c(e.call(d,f,{V:{value:{count:g.count,ia:g.ia,ja:g.ja,X:g.X,Y:g.Y,$:g.$,ca:g.ca}}}));c.V.count.value+=\n1;c.V.ia=!1;return c},[\"delete\"](){this.V.X||La(this);if(this.V.ia&&!this.V.ja)throw new K(\"Object already scheduled for deletion\");Na(this);var c=this.V;--c.count.value;0===c.count.value&&(c.$?c.ca.fa(c.$):c.Y.W.fa(c.X));this.V.ja||(this.V.$=void 0,this.V.X=void 0)},isDeleted:function(){return!this.V.X},deleteLater:function(){this.V.X||La(this);if(this.V.ia&&!this.V.ja)throw new K(\"Object already scheduled for deletion\");Oa.push(this);this.V.ia=!0;return this}});const b=Symbol.dispose;b&&(a[b]=a[\"delete\"])})();\nObject.assign(gb.prototype,{ua(a){this.qa&&(a=this.qa(a));return a},pa(a){this.fa?.(a)},da:8,readValueFromPointer:ab,fromWireType:function(a){function b(){return this.na?fb(this.W.ea,{Y:this.xa,X:c,ca:this,$:a}):fb(this.W.ea,{Y:this,X:a})}var c=this.ua(a);if(!c)return this.pa(a),null;var d=db(this.W,c);if(void 0!==d){if(0===d.V.count.value)return d.V.X=c,d.V.$=a,d.clone();d=d.clone();this.pa(a);return d}d=this.W.ta(c);d=Ra[d];if(!d)return b.call(this);d=this.ma?d.ra:d.pointerType;var e=bb(c,this.W,\nd.W);return null===e?b.call(this):this.na?fb(d.W.ea,{Y:d,X:e,ca:this,$:a}):fb(d.W.ea,{Y:d,X:e})}});n.noExitRuntime&&(Ba=n.noExitRuntime);n.printErr&&(ha=n.printErr);n.wasmBinary&&(ia=n.wasmBinary);n.thisProgram&&(ea=n.thisProgram);\nvar gc={a:function(a,b,c){a>>>=0;var d=new Ca(a);B[d.X+16>>>2>>>0]=0;B[d.X+4>>>2>>>0]=b>>>0;B[d.X+8>>>2>>>0]=c>>>0;Da=a;Ea++;throw Da;},M:()=>qa(\"\"),x:function(a,b,c,d,e){a>>>=0;c>>>=0;b=G(b>>>0);d=0n===d;let f=g=>g;if(d){const g=8*c;f=h=>BigInt.asUintN(g,h);e=f(e)}L(a,{name:b,fromWireType:f,toWireType:(g,h)=>{\"number\"==typeof h&&(h=BigInt(h));return h},da:8,readValueFromPointer:Ka(b,c,!d),ba:null})},J:function(a,b,c,d){b=G(b>>>0);L(a>>>0,{name:b,fromWireType:function(e){return!!e},toWireType:function(e,\nf){return f?c:d},da:8,readValueFromPointer:function(e){return this.fromWireType(w[e>>>0])},ba:null})},e:function(a,b,c,d,e,f,g,h,l,k,m,q,r){a>>>=0;b>>>=0;c>>>=0;d>>>=0;f>>>=0;g>>>=0;h>>>=0;l>>>=0;k>>>=0;m>>>=0;q>>>=0;r>>>=0;m=G(m);f=O(e>>>0,f);h&&=O(g,h);k&&=O(l,k);r=O(q,r);var t=Ua(m);Ta(t,function(){S(`Cannot construct ${m} due to unbound types`,[d])});T([a,b,c],d?[d]:[],u=>{u=u[0];if(d){var x=u.W;var P=x.ea}else P=Pa.prototype;u=Qa(m,function(...Ia){if(Object.getPrototypeOf(this)!==Q)throw new K(`Use 'new' to construct ${m}`);\nif(void 0===C.ha)throw new K(`${m} has no accessible constructor`);var sb=C.ha[Ia.length];if(void 0===sb)throw new K(`Tried to invoke ctor of ${m} with invalid number of parameters (${Ia.length}) - expected (${Object.keys(C.ha).toString()}) parameters instead!`);return sb.apply(this,Ia)});var Q=Object.create(P,{constructor:{value:u}});u.prototype=Q;var C=new Va(m,u,Q,r,x,f,h,k);if(C.aa){var I;(I=C.aa).la??(I.la=[]);C.aa.la.push(C)}x=new gb(m,C,!0,!1,!1);I=new gb(m+\"*\",C,!1,!1,!1);P=new gb(m+\" const*\",\nC,!1,!0,!1);Ra[a]={pointerType:I,ra:P};hb(t,u);return[x,I,P]})},s:function(a,b,c,d,e,f,g,h){a>>>=0;b>>>=0;e>>>=0;f>>>=0;g>>>=0;var l=ub(c,d>>>0);b=G(b);b=vb(b);f=O(e,f);T([],[a],k=>{function m(){S(`Cannot call ${q} due to unbound types`,l)}k=k[0];var q=`${k.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);var r=k.W.constructor;void 0===r[b]?(m.ga=c-1,r[b]=m):(Sa(r,b,q),r[b].Z[c-1]=m);T([],l,t=>{t=tb(q,[t[0],null].concat(t.slice(1)),null,f,g,h);void 0===r[b].Z?(t.ga=c-1,r[b]=t):r[b].Z[c-\n1]=t;if(k.W.la)for(const u of k.W.la)u.constructor.hasOwnProperty(b)||(u.constructor[b]=t);return[]});return[]})},y:function(a,b,c,d,e,f,g,h){a>>>=0;b>>>=0;c>>>=0;d>>>=0;f>>>=0;g>>>=0;h>>>=0;b=G(b);f=O(e>>>0,f);T([],[a],l=>{l=l[0];var k=`${l.name}.${b}`,m={get(){S(`Cannot access ${k} due to unbound types`,[c])},enumerable:!0,configurable:!0};m.set=h?()=>{S(`Cannot access ${k} due to unbound types`,[c])}:()=>{throw new K(`${k} is a read-only property`);};Object.defineProperty(l.W.constructor,b,m);\nT([],[c],q=>{q=q[0];var r={get(){return q.fromWireType(f(d))},enumerable:!0};h&&(h=O(g,h),r.set=t=>{var u=[];h(d,q.toWireType(u,t));qb(u)});Object.defineProperty(l.W.constructor,b,r);return[]});return[]})},f:function(a,b,c,d,e,f){a>>>=0;d>>>=0;e>>>=0;f>>>=0;var g=ub(b,c>>>0);e=O(d,e);T([],[a],h=>{h=h[0];var l=`constructor ${h.name}`;void 0===h.W.ha&&(h.W.ha=[]);if(void 0!==h.W.ha[b-1])throw new K(`Cannot register multiple constructors with identical number of parameters (${b-1}) for class '${h.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\nh.W.ha[b-1]=()=>{S(`Cannot construct ${h.name} due to unbound types`,g)};T([],g,k=>{k.splice(1,0,null);h.W.ha[b-1]=tb(l,k,null,e,f);return[]});return[]})},b:function(a,b,c,d,e,f,g,h,l){a>>>=0;b>>>=0;e>>>=0;f>>>=0;g>>>=0;var k=ub(c,d>>>0);b=G(b);b=vb(b);f=O(e,f);T([],[a],m=>{function q(){S(`Cannot call ${r} due to unbound types`,k)}m=m[0];var r=`${m.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);h&&m.W.ya.push(b);var t=m.W.ea,u=t[b];void 0===u||void 0===u.Z&&u.className!==m.name&&u.ga===\nc-2?(q.ga=c-2,q.className=m.name,t[b]=q):(Sa(t,b,r),t[b].Z[c-2]=q);T([],k,x=>{x=tb(r,x,m,f,g,l);void 0===t[b].Z?(x.ga=c-2,t[b]=x):t[b].Z[c-2]=x;return[]});return[]})},t:function(a,b,c,d,e,f,g,h,l,k){a>>>=0;b>>>=0;c>>>=0;e>>>=0;f>>>=0;g>>>=0;h>>>=0;l>>>=0;k>>>=0;b=G(b);e=O(d>>>0,e);T([],[a],m=>{m=m[0];var q=`${m.name}.${b}`,r={get(){S(`Cannot access ${q} due to unbound types`,[c,g])},enumerable:!0,configurable:!0};r.set=l?()=>S(`Cannot access ${q} due to unbound types`,[c,g]):()=>{throw new K(q+\" is a read-only property\");\n};Object.defineProperty(m.W.ea,b,r);T([],l?[c,g]:[c],t=>{var u=t[0],x={get(){var Q=wb(this,m,q+\" getter\");return u.fromWireType(e(f,Q))},enumerable:!0};if(l){l=O(h,l);var P=t[1];x.set=function(Q){var C=wb(this,m,q+\" setter\"),I=[];l(k,C,P.toWireType(I,Q));qb(I)}}Object.defineProperty(m.W.ea,b,x);return[]});return[]})},H:function(a){return L(a>>>0,zb)},v:function(a,b,c,d){function e(){}b=G(b>>>0);e.values={};L(a>>>0,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:(f,\ng)=>g.value,da:8,readValueFromPointer:Ab(b,c>>>0,d),ba:null});Ta(b,e)},p:function(a,b,c){b>>>=0;var d=Bb(a>>>0,\"enum\");b=G(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Qa(`${d.name}_${b}`,function(){})}});a.values[c]=d;a[b]=d},w:function(a,b,c){b=G(b>>>0);L(a>>>0,{name:b,fromWireType:d=>d,toWireType:(d,e)=>e,da:8,readValueFromPointer:Cb(b,c>>>0),ba:null})},o:function(a,b,c,d,e,f,g){a>>>=0;d>>>=0;e>>>=0;f>>>=0;var h=ub(b,c>>>0);a=G(a);a=vb(a);e=O(d,\ne);Ta(a,function(){S(`Cannot call ${a} due to unbound types`,h)},b-1);T([],h,l=>{hb(a,tb(a,[l[0],null].concat(l.slice(1)),null,e,f,g),b-1);return[]})},r:function(a,b,c,d,e){a>>>=0;c>>>=0;b=G(b>>>0);let f=h=>h;if(0===d){var g=32-8*c;f=h=>h<<g>>>g;e=f(e)}L(a,{name:b,fromWireType:f,toWireType:(h,l)=>l,da:8,readValueFromPointer:Ka(b,c,0!==d),ba:null})},k:function(a,b,c){function d(f){return new e(ka.buffer,B[f+4>>>2>>>0],B[f>>>2>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,\nFloat32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=G(c>>>0);L(a>>>0,{name:c,fromWireType:d,da:8,readValueFromPointer:d},{va:!0})},q:function(a){L(a>>>0,Db)},I:function(a,b){b=G(b>>>0);L(a>>>0,{name:b,fromWireType:function(c){for(var d=B[c>>>2>>>0],e=c+4,f,g=e,h=0;h<=d;++h){var l=e+h;if(h==d||0==w[l>>>0]){var k=g;g=(k>>>=0)?Gb(k,l-g):\"\";void 0===f?f=g:(f+=String.fromCharCode(0),f+=g);g=l+1}}R(c);return f},toWireType:function(c,d){d instanceof ArrayBuffer&&(d=new Uint8Array(d));var e=\"string\"==\ntypeof d;if(!(e||ArrayBuffer.isView(d)&&1==d.BYTES_PER_ELEMENT))throw new K(\"Cannot pass non-string to std::string\");var f=e?Eb(d):d.length;var g=ec(4+f+1),h=g+4;B[g>>>2>>>0]=f;e?W(d,h,f+1):w.set(d,h>>>0);null!==c&&c.push(R,g);return g},da:8,readValueFromPointer:ab,ba(c){R(c)}})},u:function(a,b,c){b>>>=0;c>>>=0;c=G(c);if(2===b){var d=Ib;var e=Jb;var f=Kb;var g=h=>z[h>>>1>>>0]}else 4===b&&(d=Lb,e=Mb,f=Nb,g=h=>B[h>>>2>>>0]);L(a>>>0,{name:c,fromWireType:h=>{for(var l=B[h>>>2>>>0],k,m=h+4,q=0;q<=l;++q){var r=\nh+4+q*b;if(q==l||0==g(r))m=d(m,r-m),void 0===k?k=m:(k+=String.fromCharCode(0),k+=m),m=r+b}R(h);return k},toWireType:(h,l)=>{if(\"string\"!=typeof l)throw new K(`Cannot pass non-string to C++ string type ${c}`);var k=f(l),m=ec(4+k+b);B[m>>>2>>>0]=k/b;e(l,m+4,k+b);null!==h&&h.push(R,m);return m},da:8,readValueFromPointer:ab,ba(h){R(h)}})},K:function(a,b){b=G(b>>>0);L(a>>>0,{wa:!0,name:b,da:0,fromWireType:()=>{},toWireType:()=>{}})},D:()=>{Ba=!1;Ob=0},h:function(a,b,c){b>>>=0;c>>>=0;a=V(a>>>0);b=Bb(b,\n\"emval::as\");return Pb(b,c,a)},m:function(a,b,c,d,e){c>>>=0;d>>>=0;e>>>=0;a=Sb[a>>>0];b=V(b>>>0);c=Rb(c);return a(b,b[c],d,e)},c:yb,l:function(a,b,c){b=Ub(a,b>>>0);var d=b.shift();a--;var e=\"return function (obj, func, destructorsRef, args) {\\n\",f=0,g=[];0===c&&g.push(\"obj\");for(var h=[\"retType\"],l=[d],k=0;k<a;++k)g.push(`arg${k}`),h.push(`argType${k}`),l.push(b[k]),e+=`  var arg${k} = argType${k}.readValueFromPointer(args${f?\"+\"+f:\"\"});\\n`,f+=b[k].da;e+=`  var rv = ${1===c?\"new func\":\"func.call\"}(${g.join(\", \")});\\n`;\nd.wa||(h.push(\"emval_returnValue\"),l.push(Pb),e+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\");a=(new Function(...h,e+\"};\\n\"))(...l);c=`methodCaller<(${b.map(m=>m.name).join(\", \")}) => ${d.name}>`;return Tb(Qa(c,a))},i:function(a,b){b>>>=0;a=V(a>>>0);b=V(b);return N(a[b])},n:function(a){a>>>=0;9<a&&(U[a+1]+=1)},F:function(){return N([])},j:function(a){return N(Rb(a>>>0))},d:function(a){a>>>=0;var b=V(a);qb(b);yb(a)},g:function(a,b){b>>>=0;a=Bb(a>>>0,\"_emval_take_value\");a=a.readValueFromPointer(b);\nreturn N(a)},E:(a,b)=>{X[a]&&(clearTimeout(X[a].id),delete X[a]);if(!b)return 0;var c=setTimeout(()=>{delete X[a];Xb(()=>fc(a,performance.now()))},b);X[a]={id:c,Ca:b};return 0},A:function(a,b,c,d){c>>>=0;d>>>=0;var e=(new Date).getFullYear(),f=(new Date(e,0,1)).getTimezoneOffset();e=(new Date(e,6,1)).getTimezoneOffset();B[a>>>0>>>2>>>0]=60*Math.max(f,e);A[b>>>0>>>2>>>0]=Number(f!=e);b=g=>{var h=Math.abs(g);return`UTC${0<=g?\"-\":\"+\"}${String(Math.floor(h/60)).padStart(2,\"0\")}${String(h%60).padStart(2,\n\"0\")}`};a=b(f);b=b(e);e<f?(W(a,c,17),W(b,d,17)):(W(a,d,17),W(b,c,17))},L:function(a){a>>>=0;var b=w.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);a:{d=(Math.min(4294901760,65536*Math.ceil(Math.max(a,d)/65536))-p.buffer.byteLength+65535)/65536|0;try{p.grow(d);pa();var e=1;break a}catch(f){}e=void 0}if(e)return!0}return!1},B:function(a,b){a>>>=0;b>>>=0;var c=0,d=0,e;for(e of $b()){var f=b+c;B[a+d>>>2>>>0]=f;c+=W(e,f,Infinity)+1;d+=4}return 0},G:function(a,\nb){a>>>=0;b>>>=0;var c=$b();B[a>>>2>>>0]=c.length;a=0;for(var d of c)a+=Eb(d)+1;B[b>>>2>>>0]=a;return 0},C:Wb,z:function(a,b){a>>>=0;bc(w.subarray(a>>>0,a+(b>>>0)>>>0));return 0}},Z=await (async function(){function a(d){Z=d.exports;Z=hc();p=Z.N;pa();jb=Z.U;D--;n.monitorRunDependencies?.(D);0==D&&E&&(d=E,E=null,d());return Z}D++;n.monitorRunDependencies?.(D);var b={a:gc};if(n.instantiateWasm)return new Promise(d=>{n.instantiateWasm(b,(e,f)=>{d(a(e,f))})});ra??=Aa(\"\");\ntry{var c=await ua(b);return a(c.instance)}catch(d){return ba(d),Promise.reject(d)}}()),ic=n._main=Z.P,ob=Z.Q,fc=Z.R,ec=Z.S,R=Z.T;function hc(){var a=Z;a=Object.assign({},a);var b=c=>d=>c(d)>>>0;a.Q=b(a.Q);a.S=b(a.S);a._emscripten_stack_alloc=b(a._emscripten_stack_alloc);a.emscripten_stack_get_current=(c=>()=>c()>>>0)(a.emscripten_stack_get_current);return a}\nfunction jc(){function a(){n.calledRun=!0;if(!v){Z.O();aa(n);n.onRuntimeInitialized?.();if(!n.noInitialRun)try{var b=ic(0,0);ja=b;Wb(b)}catch(c){Vb(c)}if(n.postRun)for(\"function\"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)b=n.postRun.shift(),xa.push(b);wa(xa)}}if(0<D)E=jc;else{if(n.preRun)for(\"function\"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)za();wa(ya);0<D?E=jc:n.setStatus?(n.setStatus(\"Running...\"),setTimeout(()=>{setTimeout(()=>n.setStatus(\"\"),1);a()},1)):a()}}\nif(n.preInit)for(\"function\"==typeof n.preInit&&(n.preInit=[n.preInit]);0<n.preInit.length;)n.preInit.shift()();jc();moduleRtn=ca;\n\n\n  return moduleRtn;\n}\n);\n})();\nexport default Module;\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    } = {}) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { UNSUPPORTED_BITSIZES_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { Exception } from './exception'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    ParmsIdType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Returns the ParmsId of the current parameters.\n       *\n       * @readonly\n       * @name EncryptionParameters#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText } from './plain-text'\nimport { PublicKey } from './public-key'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { GaloisKeys } from './galois-keys'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType } from './parms-id-type'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { RelinKeys } from './relin-keys'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function switches\n       * the modulus down to q_1...q_{k-1}, scales the message down accordingly,\n       * and stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceToNext\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.modReduceToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceToNext(cipherTextA, cipherDest)\n       */\n      modReduceToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function reduces\n       * the modulus down until the parameters reach the given parms_id and\n       * stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceTo\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {ParmsIdType} parmsId Target parmsId to reduce to\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.modReduceTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceTo(cipherTextA, parmsId, cipherDest)\n       */\n      modReduceTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: bigint): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: bigint) => void\n  readonly value: bigint\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: bigint): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: bigint) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: bigint) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    } = {}) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n    const _bgv = library.SchemeType.bgv\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      },\n\n      /**\n       * Return the 'bgv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bgv\n       * @type {SchemeType.bgv}\n       */\n      get bgv() {\n        /**\n         * @typedef {SchemeType.bgv} SchemeType.bgv\n         */\n        return _bgv\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { version } from '../../package.json'\nimport {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import sealLibrary from 'seal_allows_wasm_web'\nimport { SEALLibrary } from './implementation/seal'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextInit } from '../implementation/context'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SEALConstructor, SEALLibrary } from '../implementation/seal'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Instance } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["Module","moduleArg","aa","ba","n","ca","Promise","a","b","da","WorkerGlobalScope","ea","fa","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","URL","baseURI","window","ia","p","ja","ka","w","y","z","A","B","la","ma","na","oa","ha","console","error","bind","v","pa","buffer","Int8Array","Int16Array","Uint8Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","ra","D","E","qa","onAbort","WebAssembly","RuntimeError","async","ta","c","ArrayBuffer","isView","sa","instantiate","d","va","name","constructor","this","message","status","wa","length","shift","xa","ya","za","preRun","push","Ba","Ca","X","Fa","G","H","J","Ga","K","Error","super","Ha","L","hasOwnProperty","forEach","e","Ja","Ka","TypeError","La","V","Y","W","Ma","Na","M","FinalizationRegistry","count","value","$","unregister","register","Pa","Qa","Object","defineProperty","Ra","Sa","Z","apply","ga","Ta","Va","f","g","h","Wa","Xa","toString","Ya","Za","clone","Aa","N","$a","ab","fromWireType","bb","cb","eb","fb","create","writable","gb","l","k","m","toWireType","jb","hb","ib","kb","get","mb","lb","O","includes","nb","pb","ob","R","S","map","join","T","Array","qb","pop","rb","tb","q","r","split","t","u","Function","ub","vb","trim","indexOf","slice","wb","xb","U","yb","Zb","zb","readValueFromPointer","Ab","Bb","Cb","Db","assign","optional","charCodeAt","Eb","Fb","TextDecoder","Gb","NaN","decode","subarray","String","fromCharCode","Hb","Ib","Jb","Kb","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Sb","Vb","Wb","onExit","Yb","$b","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","replace","_","bc","crypto","getRandomValues","F","cc","dc","prototype","isAliasOf","getPrototypeOf","call","isDeleted","deleteLater","Symbol","dispose","ua","db","pointerType","noExitRuntime","printErr","wasmBinary","thisProgram","gc","x","BigInt","asUintN","Ua","P","Ia","Q","C","sb","keys","I","s","startsWith","substring","concat","enumerable","configurable","set","splice","className","values","o","BYTES_PER_ELEMENT","ec","Ub","Tb","i","j","clearTimeout","id","setTimeout","Xb","fc","performance","now","Date","getFullYear","getTimezoneOffset","Math","max","Number","abs","floor","padStart","min","ceil","byteLength","grow","Infinity","exports","_emscripten_stack_alloc","emscripten_stack_get_current","hc","monitorRunDependencies","instantiateWasm","instance","reject","ic","_main","preInit","jc","calledRun","onRuntimeInitialized","noInitialRun","postRun","setStatus","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","undefined","encode","array","plainText","plain","stringArray","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","modReduceToNext","modReduceTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}