{"version":3,"file":"throws_wasm_node_es.js","sources":["../src/bin/seal_throws_wasm_node.js","../src/main/loader.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context.ts","../src/implementation/context-data.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-modulus.ts","../src/implementation/plain-text.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/seal.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/throws_wasm_node_es.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["var Module = (() => {\n  \n  return (\nasync function(moduleArg = {}) {\n  var moduleRtn;\n\nvar n=moduleArg,aa,ba,ca=new Promise((a,b)=>{aa=a;ba=b}),da=\"./this.program\",ea=(a,b)=>{throw b;},fa,fs=require(\"fs\");require(\"path\");fa=a=>{a=ha(a)?new URL(a):a;return fs.readFileSync(a)};1<process.argv.length&&(da=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);ea=(a,b)=>{process.exitCode=a;throw b;};console.log.bind(console);var ia=console.error.bind(console),ja,p,v=!1,ka,la,w,y,z,A,B,ma,na,oa,pa,ha=a=>a.startsWith(\"file://\");\nfunction qa(){var a=p.buffer;la=new Int8Array(a);y=new Int16Array(a);w=new Uint8Array(a);z=new Uint16Array(a);A=new Int32Array(a);B=new Uint32Array(a);ma=new Float32Array(a);pa=new Float64Array(a);na=new BigInt64Array(a);oa=new BigUint64Array(a)}var D=0,E=null;function ra(a){n.onAbort?.(a);a=\"Aborted(\"+a+\")\";ia(a);v=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}var sa;\nasync function ta(a){if(!ArrayBuffer.isView(a))if(a==sa&&ja)a=new Uint8Array(ja);else if(fa)a=fa(a);else throw\"both async and sync fetching of the wasm failed\";return a}async function ua(a){var b=sa;try{var c=await ta(b);return await WebAssembly.instantiate(c,a)}catch(d){ia(`failed to asynchronously prepare wasm: ${d}`),ra(d)}}async function va(a){return ua(a)}class wa{name=\"ExitStatus\";constructor(a){this.message=`Program terminated with exit(${a})`;this.status=a}}\nvar xa=a=>{for(;0<a.length;)a.shift()(n)},ya=[],za=[],Aa=()=>{var a=n.preRun.shift();za.push(a)},Ba=a=>{a=Buffer.from(a,\"base64\");return new Uint8Array(a.buffer,a.byteOffset,a.length)},Ca=!0;class Da{constructor(a){this.X=a-24}}var Ea=0,Fa=0,Ga,F=a=>{for(var b=\"\";w[a>>>0];)b+=Ga[w[a++>>>0]];return b},G={},I={},Ha={},J=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}},Ia=a=>{throw new J(a);};\nfunction Ja(a,b,c={}){var d=b.name;if(!a)throw new J(`type \"${d}\" must have a positive integer typeid pointer`);if(I.hasOwnProperty(a)){if(c.wa)return;throw new J(`Cannot register type '${d}' twice`);}I[a]=b;delete Ha[a];G.hasOwnProperty(a)&&(b=G[a],delete G[a],b.forEach(e=>e()))}function K(a,b,c={}){return Ja(a,b,c)}\nvar Ka=(a,b,c)=>{switch(b){case 1:return c?d=>la[d>>>0]:d=>w[d>>>0];case 2:return c?d=>y[d>>>1>>>0]:d=>z[d>>>1>>>0];case 4:return c?d=>A[d>>>2>>>0]:d=>B[d>>>2>>>0];case 8:return c?d=>na[d>>>3>>>0]:d=>oa[d>>>3>>>0];default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Ma=a=>{throw new J(a.V.Y.W.name+\" instance already deleted\");},Na=!1,Oa=()=>{},L=a=>{if(\"undefined\"===typeof FinalizationRegistry)return L=b=>b,a;Na=new FinalizationRegistry(b=>{b=b.V;--b.count.value;0===b.count.value&&\n(b.$?b.da.ga(b.$):b.Y.W.ga(b.X))});L=b=>{var c=b.V;c.$&&Na.register(b,{V:c},b);return b};Oa=b=>{Na.unregister(b)};return L(a)},Pa=[];function Qa(){}\nvar Ra=(a,b)=>Object.defineProperty(b,\"name\",{value:a}),Sa={},Ta=(a,b,c)=>{if(void 0===a[b].Z){var d=a[b];a[b]=function(...e){if(!a[b].Z.hasOwnProperty(e.length))throw new J(`Function '${c}' called with an invalid number of arguments (${e.length}) - expects one of (${a[b].Z})!`);return a[b].Z[e.length].apply(this,e)};a[b].Z=[];a[b].Z[d.ha]=d}},Ua=(a,b,c)=>{if(n.hasOwnProperty(a)){if(void 0===c||void 0!==n[a].Z&&void 0!==n[a].Z[c])throw new J(`Cannot register public name '${a}' twice`);Ta(n,a,a);if(n[a].Z.hasOwnProperty(c))throw new J(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`);\nn[a].Z[c]=b}else n[a]=b,n[a].ha=c},Va=a=>{a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a};function Wa(a,b,c,d,e,f,g,h){this.name=a;this.constructor=b;this.fa=c;this.ga=d;this.aa=e;this.ua=f;this.la=g;this.ta=h;this.za=[]}\nvar Xa=(a,b,c)=>{for(;b!==c;){if(!b.la)throw new J(`Expected null or instance of ${c.name}, got an instance of ${b.name}`);a=b.la(a);b=b.aa}return a},Ya=a=>{if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a};\nfunction Za(a,b){if(null===b){if(this.pa)throw new J(`null is not a valid ${this.name}`);return 0}if(!b.V)throw new J(`Cannot pass \"${Ya(b)}\" as a ${this.name}`);if(!b.V.X)throw new J(`Cannot pass deleted object as a pointer of type ${this.name}`);return Xa(b.V.X,b.V.Y.W,this.W)}\nfunction $a(a,b){if(null===b){if(this.pa)throw new J(`null is not a valid ${this.name}`);if(this.oa){var c=this.Aa();null!==a&&a.push(this.ga,c);return c}return 0}if(!b||!b.V)throw new J(`Cannot pass \"${Ya(b)}\" as a ${this.name}`);if(!b.V.X)throw new J(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.na&&b.V.Y.na)throw new J(`Cannot convert argument of type ${b.V.da?b.V.da.name:b.V.Y.name} to parameter type ${this.name}`);c=Xa(b.V.X,b.V.Y.W,this.W);if(this.oa){if(void 0===\nb.V.$)throw new J(\"Passing raw pointer to smart pointer is illegal\");switch(this.Ca){case 0:if(b.V.da===this)c=b.V.$;else throw new J(`Cannot convert argument of type ${b.V.da?b.V.da.name:b.V.Y.name} to parameter type ${this.name}`);break;case 1:c=b.V.$;break;case 2:if(b.V.da===this)c=b.V.$;else{var d=b.clone();c=this.Ba(c,M(()=>d[\"delete\"]()));null!==a&&a.push(this.ga,c)}break;default:throw new J(\"Unsupporting sharing policy\");}}return c}\nfunction ab(a,b){if(null===b){if(this.pa)throw new J(`null is not a valid ${this.name}`);return 0}if(!b.V)throw new J(`Cannot pass \"${Ya(b)}\" as a ${this.name}`);if(!b.V.X)throw new J(`Cannot pass deleted object as a pointer of type ${this.name}`);if(b.V.Y.na)throw new J(`Cannot convert argument of type ${b.V.Y.name} to parameter type ${this.name}`);return Xa(b.V.X,b.V.Y.W,this.W)}function bb(a){return this.fromWireType(B[a>>>2>>>0])}\nvar cb=(a,b,c)=>{if(b===c)return a;if(void 0===c.aa)return null;a=cb(a,b,c.aa);return null===a?null:c.ta(a)},db={},eb=(a,b)=>{if(void 0===b)throw new J(\"ptr should not be undefined\");for(;a.aa;)b=a.la(b),a=a.aa;return db[b]},fb=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}},gb=(a,b)=>{if(!b.Y||!b.X)throw new fb(\"makeClassHandle requires ptr and ptrType\");if(!!b.da!==!!b.$)throw new fb(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return L(Object.create(a,\n{V:{value:b,writable:!0}}))};function hb(a,b,c,d,e,f,g,h,l,k,m){this.name=a;this.W=b;this.pa=c;this.na=d;this.oa=e;this.ya=f;this.Ca=g;this.ra=h;this.Aa=l;this.Ba=k;this.ga=m;e||void 0!==b.aa?this.toWireType=$a:(this.toWireType=d?Za:ab,this.ba=null)}\nvar ib=(a,b,c)=>{if(!n.hasOwnProperty(a))throw new fb(\"Replacing nonexistent public symbol\");void 0!==n[a].Z&&void 0!==c?n[a].Z[c]=b:(n[a]=b,n[a].ha=c)},jb=[],kb,lb=a=>{var b=jb[a];b||(jb[a]=b=kb.get(a));return b},mb=(a,b,c=[])=>{b=lb(b)(...c);return\"p\"==a[0]?b>>>0:b},nb=(a,b)=>(...c)=>mb(a,b,c),N=(a,b)=>{a=F(a);var c=a.includes(\"p\")?nb(a,b):lb(b);if(\"function\"!=typeof c)throw new J(`unknown function pointer with signature ${a}: ${b}`);return c};class ob extends Error{}\nvar qb=a=>{a=pb(a);var b=F(a);Q(a);return b},R=(a,b)=>{function c(f){e[f]||I[f]||(Ha[f]?Ha[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new ob(`${a}: `+d.map(qb).join([\", \"]));},S=(a,b,c)=>{function d(h){h=c(h);if(h.length!==a.length)throw new fb(\"Mismatched type converter count\");for(var l=0;l<a.length;++l)K(a[l],h[l])}a.forEach(h=>Ha[h]=b);var e=Array(b.length),f=[],g=0;b.forEach((h,l)=>{I.hasOwnProperty(h)?e[l]=I[h]:(f.push(h),G.hasOwnProperty(h)||(G[h]=[]),G[h].push(()=>\n{e[l]=I[h];++g;g===f.length&&d(e)}))});0===f.length&&d(e)},rb=a=>{for(;a.length;){var b=a.pop();a.pop()(b)}};function sb(a){for(var b=1;b<a.length;++b)if(null!==a[b]&&void 0===a[b].ba)return!0;return!1}\nfunction tb(a,b,c,d,e,f){var g=b.length;if(2>g)throw new J(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var h=null!==b[1]&&null!==c,l=sb(b);c=\"void\"!==b[0].name;d=[a,Ia,d,e,rb,b[0],b[1]];for(e=0;e<g-2;++e)d.push(b[e+2]);if(!l)for(e=h?1:2;e<b.length;++e)null!==b[e].ba&&d.push(b[e].ba);l=sb(b);e=b.length-2;var k=[],m=[\"fn\"];h&&m.push(\"thisWired\");for(g=0;g<e;++g)k.push(`arg${g}`),m.push(`arg${g}Wired`);k=k.join(\",\");m=m.join(\",\");k=`return function (${k}) {\\n`;l&&\n(k+=\"var destructors = [];\\n\");var q=l?\"destructors\":\"null\",r=\"humanName throwBindingError invoker fn runDestructors retType classParam\".split(\" \");h&&(k+=`var thisWired = classParam['toWireType'](${q}, this);\\n`);for(g=0;g<e;++g)k+=`var arg${g}Wired = argType${g}['toWireType'](${q}, arg${g});\\n`,r.push(`argType${g}`);k+=(c||f?\"var rv = \":\"\")+`invoker(${m});\\n`;if(l)k+=\"runDestructors(destructors);\\n\";else for(g=h?1:2;g<b.length;++g)f=1===g?\"thisWired\":\"arg\"+(g-2)+\"Wired\",null!==b[g].ba&&(k+=`${f}_dtor(${f});\\n`,\nr.push(`${f}_dtor`));c&&(k+=\"var ret = retType['fromWireType'](rv);\\nreturn ret;\\n\");let [t,u]=[r,k+\"}\\n\"];b=(new Function(...t,u))(...d);return Ra(a,b)}\nvar vb=(a,b)=>{for(var c=[],d=0;d<a;d++)c.push(B[b+4*d>>>2>>>0]);return c},wb=a=>{a=a.trim();const b=a.indexOf(\"(\");return-1===b?a:a.slice(0,b)},xb=(a,b,c)=>{if(!(a instanceof Object))throw new J(`${c} with invalid \"this\": ${a}`);if(!(a instanceof b.W.constructor))throw new J(`${c} incompatible with \"this\" of type ${a.constructor.name}`);if(!a.V.X)throw new J(`cannot call emscripten binding method ${c} on deleted object`);return Xa(a.V.X,a.V.Y.W,b.W)},yb=[],T=[0,1,,1,null,1,!0,1,!1,1];\nfunction zb(a){a>>>=0;9<a&&0===--T[a+1]&&(T[a]=void 0,yb.push(a))}\nfor(var U=a=>{if(!a)throw new J(`Cannot use deleted val. handle = ${a}`);return T[a]},M=a=>{switch(a){case void 0:return 2;case null:return 4;case !0:return 6;case !1:return 8;default:const b=yb.pop()||T.length;T[b]=a;T[b+1]=1;return b}},Ab={name:\"emscripten::val\",fromWireType:a=>{var b=U(a);zb(a);return b},toWireType:(a,b)=>M(b),ea:8,readValueFromPointer:bb,ba:null},Bb=(a,b,c)=>{switch(b){case 1:return c?function(d){return this.fromWireType(la[d>>>0])}:function(d){return this.fromWireType(w[d>>>\n0])};case 2:return c?function(d){return this.fromWireType(y[d>>>1>>>0])}:function(d){return this.fromWireType(z[d>>>1>>>0])};case 4:return c?function(d){return this.fromWireType(A[d>>>2>>>0])}:function(d){return this.fromWireType(B[d>>>2>>>0])};default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Cb=(a,b)=>{var c=I[a];if(void 0===c)throw a=`${b} has unknown type ${qb(a)}`,new J(a);return c},Db=(a,b)=>{switch(b){case 4:return function(c){return this.fromWireType(ma[c>>>2>>>0])};case 8:return function(c){return this.fromWireType(pa[c>>>\n3>>>0])};default:throw new TypeError(`invalid float width (${b}): ${a}`);}},Eb=Object.assign({optional:!0},Ab),V=(a,b,c)=>{var d=w;b>>>=0;if(!(0<c))return 0;var e=b;c=b+c-1;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);if(55296<=g&&57343>=g){var h=a.charCodeAt(++f);g=65536+((g&1023)<<10)|h&1023}if(127>=g){if(b>=c)break;d[b++>>>0]=g}else{if(2047>=g){if(b+1>=c)break;d[b++>>>0]=192|g>>6}else{if(65535>=g){if(b+2>=c)break;d[b++>>>0]=224|g>>12}else{if(b+3>=c)break;d[b++>>>0]=240|g>>18;d[b++>>>0]=128|\ng>>12&63}d[b++>>>0]=128|g>>6&63}d[b++>>>0]=128|g&63}}d[b>>>0]=0;return b-e},Fb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Gb=\"undefined\"!=typeof TextDecoder?new TextDecoder:void 0,Hb=(a=0,b=NaN)=>{var c=w;a>>>=0;var d=a+b;for(b=a;c[b]&&!(b>=d);)++b;if(16<b-a&&c.buffer&&Gb)return Gb.decode(c.subarray(a,b));for(d=\"\";a<b;){var e=c[a++];if(e&128){var f=c[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var g=\nc[a++]&63;e=224==(e&240)?(e&15)<<12|f<<6|g:(e&7)<<18|f<<12|g<<6|c[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},Ib=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Jb=(a,b)=>{a>>>=1;b=a+b/2;for(var c=a;!(c>=b)&&z[c>>>0];)++c;if(16<c-a&&Ib)return Ib.decode(z.subarray(a>>>0,c>>>0));for(c=\"\";!(a>=b);++a){var d=z[a>>>0];if(0==d)break;c+=String.fromCharCode(d)}return c},Kb=(a,b,c)=>{c??=\n2147483647;if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)y[b>>>1>>>0]=a.charCodeAt(e),b+=2;y[b>>>1>>>0]=0;return b-d},Lb=a=>2*a.length,Mb=(a,b)=>{for(var c=0,d=\"\";!(c>=b/4);){var e=A[a+4*c>>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Nb=(a,b,c)=>{b>>>=0;c??=2147483647;if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var g=a.charCodeAt(++e);\nf=65536+((f&1023)<<10)|g&1023}A[b>>>2>>>0]=f;b+=4;if(b+4>c)break}A[b>>>2>>>0]=0;return b-d},Ob=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b},Pb=0,Qb=(a,b,c)=>{var d=[];a=a.toWireType(d,c);d.length&&(B[b>>>2>>>0]=M(d));return a},Rb={},Sb=a=>{var b=Rb[a];return void 0===b?F(a):b},Tb=[],Ub=a=>{var b=Tb.length;Tb.push(a);return b},Vb=(a,b)=>{for(var c=Array(a),d=0;d<a;++d)c[d]=Cb(B[b+4*d>>>2>>>0],`parameter ${d}`);return c},W={},Wb=a=>{a instanceof wa||\n\"unwind\"==a||ea(1,a)},Xb=a=>{ka=a;Ca||0<Pb||(n.onExit?.(a),v=!0);ea(a,new wa(a))},Yb=a=>{if(!v)try{if(a(),!(Ca||0<Pb))try{ka=a=ka,Xb(a)}catch(b){Wb(b)}}catch(b){Wb(b)}},Zb={},ac=()=>{if(!$b){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Zb)void 0===Zb[b]?delete a[b]:a[b]=Zb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);\n$b=c}return $b},$b,bc=()=>{var a=require(\"crypto\");return b=>a.randomFillSync(b)},cc=a=>{(cc=bc())(a)},X=new Uint8Array(123),Y=25;0<=Y;--Y)X[48+Y]=52+Y,X[65+Y]=Y,X[97+Y]=26+Y;X[43]=62;X[47]=63;for(var dc=Array(256),ec=0;256>ec;++ec)dc[ec]=String.fromCharCode(ec);Ga=dc;\n(()=>{let a=Qa.prototype;Object.assign(a,{isAliasOf:function(c){if(!(this instanceof Qa&&c instanceof Qa))return!1;var d=this.V.Y.W,e=this.V.X;c.V=c.V;var f=c.V.Y.W;for(c=c.V.X;d.aa;)e=d.la(e),d=d.aa;for(;f.aa;)c=f.la(c),f=f.aa;return d===f&&e===c},clone:function(){this.V.X||Ma(this);if(this.V.ka)return this.V.count.value+=1,this;var c=L,d=Object,e=d.create,f=Object.getPrototypeOf(this),g=this.V;c=c(e.call(d,f,{V:{value:{count:g.count,ja:g.ja,ka:g.ka,X:g.X,Y:g.Y,$:g.$,da:g.da}}}));c.V.count.value+=\n1;c.V.ja=!1;return c},[\"delete\"](){this.V.X||Ma(this);if(this.V.ja&&!this.V.ka)throw new J(\"Object already scheduled for deletion\");Oa(this);var c=this.V;--c.count.value;0===c.count.value&&(c.$?c.da.ga(c.$):c.Y.W.ga(c.X));this.V.ka||(this.V.$=void 0,this.V.X=void 0)},isDeleted:function(){return!this.V.X},deleteLater:function(){this.V.X||Ma(this);if(this.V.ja&&!this.V.ka)throw new J(\"Object already scheduled for deletion\");Pa.push(this);this.V.ja=!0;return this}});const b=Symbol.dispose;b&&(a[b]=a[\"delete\"])})();\nObject.assign(hb.prototype,{va(a){this.ra&&(a=this.ra(a));return a},qa(a){this.ga?.(a)},ea:8,readValueFromPointer:bb,fromWireType:function(a){function b(){return this.oa?gb(this.W.fa,{Y:this.ya,X:c,da:this,$:a}):gb(this.W.fa,{Y:this,X:a})}var c=this.va(a);if(!c)return this.qa(a),null;var d=eb(this.W,c);if(void 0!==d){if(0===d.V.count.value)return d.V.X=c,d.V.$=a,d.clone();d=d.clone();this.qa(a);return d}d=this.W.ua(c);d=Sa[d];if(!d)return b.call(this);d=this.na?d.sa:d.pointerType;var e=cb(c,this.W,\nd.W);return null===e?b.call(this):this.oa?gb(d.W.fa,{Y:d,X:e,da:this,$:a}):gb(d.W.fa,{Y:d,X:e})}});n.noExitRuntime&&(Ca=n.noExitRuntime);n.printErr&&(ia=n.printErr);n.wasmBinary&&(ja=n.wasmBinary);n.thisProgram&&(da=n.thisProgram);\nvar hc={a:function(a,b,c){a>>>=0;var d=new Da(a);B[d.X+16>>>2>>>0]=0;B[d.X+4>>>2>>>0]=b>>>0;B[d.X+8>>>2>>>0]=c>>>0;Ea=a;Fa++;throw Ea;},M:()=>ra(\"\"),x:function(a,b,c,d,e){a>>>=0;c>>>=0;b=F(b>>>0);d=0n===d;let f=g=>g;if(d){const g=8*c;f=h=>BigInt.asUintN(g,h);e=f(e)}K(a,{name:b,fromWireType:f,toWireType:(g,h)=>{\"number\"==typeof h&&(h=BigInt(h));return h},ea:8,readValueFromPointer:Ka(b,c,!d),ba:null})},J:function(a,b,c,d){b=F(b>>>0);K(a>>>0,{name:b,fromWireType:function(e){return!!e},toWireType:function(e,\nf){return f?c:d},ea:8,readValueFromPointer:function(e){return this.fromWireType(w[e>>>0])},ba:null})},e:function(a,b,c,d,e,f,g,h,l,k,m,q,r){a>>>=0;b>>>=0;c>>>=0;d>>>=0;f>>>=0;g>>>=0;h>>>=0;l>>>=0;k>>>=0;m>>>=0;q>>>=0;r>>>=0;m=F(m);f=N(e>>>0,f);h&&=N(g,h);k&&=N(l,k);r=N(q,r);var t=Va(m);Ua(t,function(){R(`Cannot construct ${m} due to unbound types`,[d])});S([a,b,c],d?[d]:[],u=>{u=u[0];if(d){var x=u.W;var O=x.fa}else O=Qa.prototype;u=Ra(m,function(...La){if(Object.getPrototypeOf(this)!==P)throw new J(`Use 'new' to construct ${m}`);\nif(void 0===C.ia)throw new J(`${m} has no accessible constructor`);var ub=C.ia[La.length];if(void 0===ub)throw new J(`Tried to invoke ctor of ${m} with invalid number of parameters (${La.length}) - expected (${Object.keys(C.ia).toString()}) parameters instead!`);return ub.apply(this,La)});var P=Object.create(O,{constructor:{value:u}});u.prototype=P;var C=new Wa(m,u,P,r,x,f,h,k);if(C.aa){var H;(H=C.aa).ma??(H.ma=[]);C.aa.ma.push(C)}x=new hb(m,C,!0,!1,!1);H=new hb(m+\"*\",C,!1,!1,!1);O=new hb(m+\" const*\",\nC,!1,!0,!1);Sa[a]={pointerType:H,sa:O};ib(t,u);return[x,H,O]})},s:function(a,b,c,d,e,f,g,h){a>>>=0;b>>>=0;e>>>=0;f>>>=0;g>>>=0;var l=vb(c,d>>>0);b=F(b);b=wb(b);f=N(e,f);S([],[a],k=>{function m(){R(`Cannot call ${q} due to unbound types`,l)}k=k[0];var q=`${k.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);var r=k.W.constructor;void 0===r[b]?(m.ha=c-1,r[b]=m):(Ta(r,b,q),r[b].Z[c-1]=m);S([],l,t=>{t=[t[0],null].concat(t.slice(1));t=tb(q,t,null,f,g,h);void 0===r[b].Z?(t.ha=c-1,r[b]=t):r[b].Z[c-\n1]=t;if(k.W.ma)for(const u of k.W.ma)u.constructor.hasOwnProperty(b)||(u.constructor[b]=t);return[]});return[]})},y:function(a,b,c,d,e,f,g,h){a>>>=0;b>>>=0;c>>>=0;d>>>=0;f>>>=0;g>>>=0;h>>>=0;b=F(b);f=N(e>>>0,f);S([],[a],l=>{l=l[0];var k=`${l.name}.${b}`,m={get(){R(`Cannot access ${k} due to unbound types`,[c])},enumerable:!0,configurable:!0};m.set=h?()=>{R(`Cannot access ${k} due to unbound types`,[c])}:()=>{throw new J(`${k} is a read-only property`);};Object.defineProperty(l.W.constructor,b,m);\nS([],[c],q=>{q=q[0];var r={get(){return q.fromWireType(f(d))},enumerable:!0};h&&(h=N(g,h),r.set=t=>{var u=[];h(d,q.toWireType(u,t));rb(u)});Object.defineProperty(l.W.constructor,b,r);return[]});return[]})},f:function(a,b,c,d,e,f){a>>>=0;d>>>=0;e>>>=0;f>>>=0;var g=vb(b,c>>>0);e=N(d,e);S([],[a],h=>{h=h[0];var l=`constructor ${h.name}`;void 0===h.W.ia&&(h.W.ia=[]);if(void 0!==h.W.ia[b-1])throw new J(`Cannot register multiple constructors with identical number of parameters (${b-1}) for class '${h.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\nh.W.ia[b-1]=()=>{R(`Cannot construct ${h.name} due to unbound types`,g)};S([],g,k=>{k.splice(1,0,null);h.W.ia[b-1]=tb(l,k,null,e,f);return[]});return[]})},b:function(a,b,c,d,e,f,g,h,l){a>>>=0;b>>>=0;e>>>=0;f>>>=0;g>>>=0;var k=vb(c,d>>>0);b=F(b);b=wb(b);f=N(e,f);S([],[a],m=>{function q(){R(`Cannot call ${r} due to unbound types`,k)}m=m[0];var r=`${m.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);h&&m.W.za.push(b);var t=m.W.fa,u=t[b];void 0===u||void 0===u.Z&&u.className!==m.name&&u.ha===\nc-2?(q.ha=c-2,q.className=m.name,t[b]=q):(Ta(t,b,r),t[b].Z[c-2]=q);S([],k,x=>{x=tb(r,x,m,f,g,l);void 0===t[b].Z?(x.ha=c-2,t[b]=x):t[b].Z[c-2]=x;return[]});return[]})},t:function(a,b,c,d,e,f,g,h,l,k){a>>>=0;b>>>=0;c>>>=0;e>>>=0;f>>>=0;g>>>=0;h>>>=0;l>>>=0;k>>>=0;b=F(b);e=N(d>>>0,e);S([],[a],m=>{m=m[0];var q=`${m.name}.${b}`,r={get(){R(`Cannot access ${q} due to unbound types`,[c,g])},enumerable:!0,configurable:!0};r.set=l?()=>R(`Cannot access ${q} due to unbound types`,[c,g]):()=>{throw new J(q+\" is a read-only property\");\n};Object.defineProperty(m.W.fa,b,r);S([],l?[c,g]:[c],t=>{var u=t[0],x={get(){var P=xb(this,m,q+\" getter\");return u.fromWireType(e(f,P))},enumerable:!0};if(l){l=N(h,l);var O=t[1];x.set=function(P){var C=xb(this,m,q+\" setter\"),H=[];l(k,C,O.toWireType(H,P));rb(H)}}Object.defineProperty(m.W.fa,b,x);return[]});return[]})},H:function(a){return K(a>>>0,Ab)},v:function(a,b,c,d){function e(){}b=F(b>>>0);e.values={};K(a>>>0,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:(f,\ng)=>g.value,ea:8,readValueFromPointer:Bb(b,c>>>0,d),ba:null});Ua(b,e)},p:function(a,b,c){b>>>=0;var d=Cb(a>>>0,\"enum\");b=F(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Ra(`${d.name}_${b}`,function(){})}});a.values[c]=d;a[b]=d},w:function(a,b,c){b=F(b>>>0);K(a>>>0,{name:b,fromWireType:d=>d,toWireType:(d,e)=>e,ea:8,readValueFromPointer:Db(b,c>>>0),ba:null})},o:function(a,b,c,d,e,f,g){a>>>=0;d>>>=0;e>>>=0;f>>>=0;var h=vb(b,c>>>0);a=F(a);a=wb(a);e=N(d,\ne);Ua(a,function(){R(`Cannot call ${a} due to unbound types`,h)},b-1);S([],h,l=>{l=[l[0],null].concat(l.slice(1));ib(a,tb(a,l,null,e,f,g),b-1);return[]})},r:function(a,b,c,d,e){a>>>=0;c>>>=0;b=F(b>>>0);let f=h=>h;if(0===d){var g=32-8*c;f=h=>h<<g>>>g;e=f(e)}K(a,{name:b,fromWireType:f,toWireType:(h,l)=>l,ea:8,readValueFromPointer:Ka(b,c,0!==d),ba:null})},k:function(a,b,c){function d(f){return new e(la.buffer,B[f+4>>>2>>>0],B[f>>>2>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,\nUint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=F(c>>>0);K(a>>>0,{name:c,fromWireType:d,ea:8,readValueFromPointer:d},{wa:!0})},q:function(a){K(a>>>0,Eb)},I:function(a,b){b=F(b>>>0);K(a>>>0,{name:b,fromWireType:function(c){for(var d=B[c>>>2>>>0],e=c+4,f,g=e,h=0;h<=d;++h){var l=e+h;if(h==d||0==w[l>>>0]){var k=g;g=(k>>>=0)?Hb(k,l-g):\"\";void 0===f?f=g:(f+=String.fromCharCode(0),f+=g);g=l+1}}Q(c);return f},toWireType:function(c,d){d instanceof ArrayBuffer&&(d=new Uint8Array(d));\nvar e=\"string\"==typeof d;if(!(e||ArrayBuffer.isView(d)&&1==d.BYTES_PER_ELEMENT))throw new J(\"Cannot pass non-string to std::string\");var f=e?Fb(d):d.length;var g=fc(4+f+1),h=g+4;B[g>>>2>>>0]=f;e?V(d,h,f+1):w.set(d,h>>>0);null!==c&&c.push(Q,g);return g},ea:8,readValueFromPointer:bb,ba(c){Q(c)}})},u:function(a,b,c){b>>>=0;c>>>=0;c=F(c);if(2===b){var d=Jb;var e=Kb;var f=Lb;var g=h=>z[h>>>1>>>0]}else 4===b&&(d=Mb,e=Nb,f=Ob,g=h=>B[h>>>2>>>0]);K(a>>>0,{name:c,fromWireType:h=>{for(var l=B[h>>>2>>>0],k,m=\nh+4,q=0;q<=l;++q){var r=h+4+q*b;if(q==l||0==g(r))m=d(m,r-m),void 0===k?k=m:(k+=String.fromCharCode(0),k+=m),m=r+b}Q(h);return k},toWireType:(h,l)=>{if(\"string\"!=typeof l)throw new J(`Cannot pass non-string to C++ string type ${c}`);var k=f(l),m=fc(4+k+b);B[m>>>2>>>0]=k/b;e(l,m+4,k+b);null!==h&&h.push(Q,m);return m},ea:8,readValueFromPointer:bb,ba(h){Q(h)}})},K:function(a,b){b=F(b>>>0);K(a>>>0,{xa:!0,name:b,ea:0,fromWireType:()=>{},toWireType:()=>{}})},D:()=>{Ca=!1;Pb=0},h:function(a,b,c){b>>>=0;c>>>=\n0;a=U(a>>>0);b=Cb(b,\"emval::as\");return Qb(b,c,a)},m:function(a,b,c,d,e){c>>>=0;d>>>=0;e>>>=0;a=Tb[a>>>0];b=U(b>>>0);c=Sb(c);return a(b,b[c],d,e)},c:zb,l:function(a,b,c){b=Vb(a,b>>>0);var d=b.shift();a--;var e=\"return function (obj, func, destructorsRef, args) {\\n\",f=0,g=[];0===c&&g.push(\"obj\");for(var h=[\"retType\"],l=[d],k=0;k<a;++k)g.push(`arg${k}`),h.push(`argType${k}`),l.push(b[k]),e+=`  var arg${k} = argType${k}.readValueFromPointer(args${f?\"+\"+f:\"\"});\\n`,f+=b[k].ea;e+=`  var rv = ${1===c?\"new func\":\n\"func.call\"}(${g.join(\", \")});\\n`;d.xa||(h.push(\"emval_returnValue\"),l.push(Qb),e+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\");a=(new Function(...h,e+\"};\\n\"))(...l);c=`methodCaller<(${b.map(m=>m.name).join(\", \")}) => ${d.name}>`;return Ub(Ra(c,a))},i:function(a,b){b>>>=0;a=U(a>>>0);b=U(b);return M(a[b])},n:function(a){a>>>=0;9<a&&(T[a+1]+=1)},F:function(){return M([])},j:function(a){return M(Sb(a>>>0))},d:function(a){a>>>=0;var b=U(a);rb(b);zb(a)},g:function(a,b){b>>>=0;a=Cb(a>>>\n0,\"_emval_take_value\");a=a.readValueFromPointer(b);return M(a)},E:(a,b)=>{W[a]&&(clearTimeout(W[a].id),delete W[a]);if(!b)return 0;var c=setTimeout(()=>{delete W[a];Yb(()=>gc(a,performance.now()))},b);W[a]={id:c,Da:b};return 0},A:function(a,b,c,d){c>>>=0;d>>>=0;var e=(new Date).getFullYear(),f=(new Date(e,0,1)).getTimezoneOffset();e=(new Date(e,6,1)).getTimezoneOffset();B[a>>>0>>>2>>>0]=60*Math.max(f,e);A[b>>>0>>>2>>>0]=Number(f!=e);b=g=>{var h=Math.abs(g);return`UTC${0<=g?\"-\":\"+\"}${String(Math.floor(h/\n60)).padStart(2,\"0\")}${String(h%60).padStart(2,\"0\")}`};a=b(f);b=b(e);e<f?(V(a,c,17),V(b,d,17)):(V(a,d,17),V(b,c,17))},L:function(a){a>>>=0;var b=w.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);a:{d=(Math.min(4294901760,65536*Math.ceil(Math.max(a,d)/65536))-p.buffer.byteLength+65535)/65536|0;try{p.grow(d);qa();var e=1;break a}catch(f){}e=void 0}if(e)return!0}return!1},B:function(a,b){a>>>=0;b>>>=0;var c=0,d=0,e;for(e of ac()){var f=b+c;B[a+d>>>2>>>\n0]=f;c+=V(e,f,Infinity)+1;d+=4}return 0},G:function(a,b){a>>>=0;b>>>=0;var c=ac();B[a>>>2>>>0]=c.length;a=0;for(var d of c)a+=Fb(d)+1;B[b>>>2>>>0]=a;return 0},C:Xb,z:function(a,b){a>>>=0;cc(w.subarray(a>>>0,a+(b>>>0)>>>0));return 0}},Z=await (async function(){function a(d){Z=d.exports;Z=ic();p=Z.N;qa();kb=Z.U;D--;n.monitorRunDependencies?.(D);0==D&&E&&(d=E,E=null,d());return Z}D++;n.monitorRunDependencies?.(D);var b={a:hc};if(n.instantiateWasm)return new Promise(d=>{n.instantiateWasm(b,\n(e,f)=>{d(a(e,f))})});sa??=Ba(\"\");try{var c=await va(b);return a(c.instance)}catch(d){return ba(d),Promise.reject(d)}}()),jc=n._main=Z.P,pb=Z.Q,gc=Z.R,fc=Z.S,Q=Z.T;function ic(){var a=Z;a=Object.assign({},a);var b=c=>d=>c(d)>>>0;a.Q=b(a.Q);a.S=b(a.S);a._emscripten_stack_alloc=b(a._emscripten_stack_alloc);a.emscripten_stack_get_current=(c=>()=>c()>>>0)(a.emscripten_stack_get_current);return a}\nfunction kc(){function a(){n.calledRun=!0;if(!v){Z.O();aa(n);n.onRuntimeInitialized?.();if(!n.noInitialRun)try{var b=jc(0,0);ka=b;Xb(b)}catch(c){Wb(c)}if(n.postRun)for(\"function\"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)b=n.postRun.shift(),ya.push(b);xa(ya)}}if(0<D)E=kc;else{if(n.preRun)for(\"function\"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)Aa();xa(za);0<D?E=kc:n.setStatus?(n.setStatus(\"Running...\"),setTimeout(()=>{setTimeout(()=>n.setStatus(\"\"),1);a()},1)):a()}}\nif(n.preInit)for(\"function\"==typeof n.preInit&&(n.preInit=[n.preInit]);0<n.preInit.length;)n.preInit.shift()();kc();moduleRtn=ca;\n\n\n  return moduleRtn;\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object') {\n  module.exports = Module;\n  // This default export looks redundant, but it allows TS to import this\n  // commonjs style module.\n  module.exports.default = Module;\n} else if (typeof define === 'function' && define['amd'])\n  define([], () => Module);\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    } = {}) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { UNSUPPORTED_BITSIZES_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { Exception } from './exception'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    ParmsIdType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Returns the ParmsId of the current parameters.\n       *\n       * @readonly\n       * @name EncryptionParameters#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText } from './plain-text'\nimport { PublicKey } from './public-key'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { GaloisKeys } from './galois-keys'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType } from './parms-id-type'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { RelinKeys } from './relin-keys'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function switches\n       * the modulus down to q_1...q_{k-1}, scales the message down accordingly,\n       * and stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceToNext\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.modReduceToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceToNext(cipherTextA, cipherDest)\n       */\n      modReduceToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function reduces\n       * the modulus down until the parameters reach the given parms_id and\n       * stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceTo\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {ParmsIdType} parmsId Target parmsId to reduce to\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.modReduceTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceTo(cipherTextA, parmsId, cipherDest)\n       */\n      modReduceTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: bigint): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: bigint) => void\n  readonly value: bigint\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: bigint): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: bigint) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: bigint) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    } = {}) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n    const _bgv = library.SchemeType.bgv\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      },\n\n      /**\n       * Return the 'bgv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bgv\n       * @type {SchemeType.bgv}\n       */\n      get bgv() {\n        /**\n         * @typedef {SchemeType.bgv} SchemeType.bgv\n         */\n        return _bgv\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { version } from '../../package.json'\nimport {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import sealLibrary from 'seal_throws_wasm_node'\nimport { SEALLibrary } from './implementation/seal'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextInit } from '../implementation/context'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SEALConstructor, SEALLibrary } from '../implementation/seal'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Instance } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["Module","exports","moduleArg","aa","ba","ea","fa","n","ca","Promise","a","b","da","fs","require$$0","ha","URL","readFileSync","process","argv","length","replace","slice","exitCode","console","log","bind","ja","p","ka","la","w","y","z","A","B","ma","na","oa","pa","ia","error","v","startsWith","qa","buffer","Int8Array","Int16Array","Uint8Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","sa","D","E","ra","onAbort","WebAssembly","RuntimeError","async","ua","c","ArrayBuffer","isView","ta","instantiate","d","wa","name","constructor","this","message","status","xa","shift","ya","za","Aa","preRun","push","Ca","Da","X","Ga","F","G","I","Ha","J","Error","super","Ia","K","hasOwnProperty","forEach","e","Ja","Ka","TypeError","Ma","V","Y","W","Na","Oa","L","FinalizationRegistry","count","value","$","ga","unregister","register","Qa","Ra","Object","defineProperty","Sa","Ta","Z","apply","Ua","Wa","f","g","h","Xa","Ya","toString","Za","$a","clone","Ba","M","ab","bb","fromWireType","cb","db","fb","gb","create","writable","hb","l","k","m","toWireType","kb","ib","jb","lb","get","nb","mb","N","includes","ob","qb","pb","Q","R","map","join","S","Array","rb","pop","sb","tb","q","r","split","t","u","Function","vb","wb","trim","indexOf","xb","yb","T","zb","$b","U","Ab","readValueFromPointer","Bb","Cb","Db","Eb","assign","optional","charCodeAt","Fb","Gb","TextDecoder","Hb","NaN","decode","subarray","String","fromCharCode","Ib","Jb","Kb","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Sb","Tb","Wb","Xb","onExit","Zb","ac","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","cc","require$$2","randomFillSync","bc","dc","ec","prototype","isAliasOf","getPrototypeOf","call","isDeleted","deleteLater","Symbol","dispose","va","eb","pointerType","noExitRuntime","printErr","wasmBinary","thisProgram","hc","x","BigInt","asUintN","Va","O","La","P","C","ub","keys","H","s","substring","concat","enumerable","configurable","set","splice","className","values","o","BYTES_PER_ELEMENT","fc","Vb","Ub","i","j","clearTimeout","id","setTimeout","Yb","gc","performance","now","Date","getFullYear","getTimezoneOffset","Math","max","Number","abs","floor","padStart","min","ceil","byteLength","grow","Infinity","_emscripten_stack_alloc","emscripten_stack_get_current","ic","monitorRunDependencies","instantiateWasm","Buffer","from","byteOffset","instance","reject","jc","_main","preInit","kc","calledRun","onRuntimeInitialized","noInitialRun","postRun","setStatus","module","default","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","undefined","encode","array","plainText","plain","stringArray","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","modReduceToNext","modReduceTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","bin","createLoader","sealLibrary","throws_wasm_node_es","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}